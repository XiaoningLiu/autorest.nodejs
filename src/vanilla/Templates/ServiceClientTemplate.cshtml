@using System.Linq
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.NodeJS.vanilla.Templates
@inherits AutoRest.Core.Template<AutoRest.NodeJS.Model.CodeModelJs>
/*
@Header(" * ")
 */
@EmptyLine
const express = require('express')
const path = require('path')
const logger = require('morgan')
const cookieParser = require('cookie-parser')
const bodyParser = require('body-parser')
const http = require('http')
@EmptyLine
const app = express();
@EmptyLine
@foreach (var method in Model.MethodTemplateModels)
{
@EmptyLine
@:@(Include(new MethodTemplate(), method))
}
@EmptyLine
app.use(logger('dev'));
app.use(bodyParser.raw({
  inflate: true,
  limit: '10000kb',
  type: function (type) {
    return true
  }
}))
app.use(cookieParser());

// setup the routers
routes = require('./lib/route')(app);

// catch 404 and forward to error handler
app.use(function (req, res, next) {
    var err = new Error('Not Found');
    err.status = 404;
    next(err);
});

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
    app.use(function (err, req, res, next) {
        res.status(err.status || 500);
        res.send({
            message: err.message,
            error: err
        });
    });
}
// production error handler
// no stacktraces leaked to user
app.use(function (err, req, res, next) {
    res.status(err.status || 500);
    res.send({
        message: err.message,
        error: {}
    });
});
@EmptyLine
/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)
@EmptyLine
/**
 * Create HTTP server.
 */
var server = http.createServer(app)

function normalizePort (val) {
  var port = parseInt(val, 10)
  if (isNaN(port)) {
        // named pipe
    return val
  }
  if (port >= 0) {
        // port number
    return port
  }
  return false
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError)
server.on('listening', onListening)

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }
  var port = server.address().port
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  console.log('Listening on ' + bind)
}

process.on('unhandledRejection', (e) => {
	console.error('**PANIC** Something unexpected happened! Queue Storage Emulator may be in an inconsistent state!');
	console.error(e);
});

// Start the server
server.listen(port)